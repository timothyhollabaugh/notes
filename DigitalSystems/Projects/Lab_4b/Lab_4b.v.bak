
module AddOne(A, S, Cout);
	input A;
	output S;
	output Cout;
	
	assign S = A;
	assign Cout = ~A;
endmodule



module NotHalfAdder(A, Cin, S, Cout);
	input A;
	input Cin;
	output S;
	output Cout;
	
	assign S = ~A ^ Cin;
	assign Cout = ~A & Cin;

endmodule



module Complement(A, S);
	
	input [5:0]A;
	output [5:0]S;
	
	wire [5..0]Cout;
	
	AddOne add_one(
		.A(A[0]),
		.S(S[0]),
		.Cout(Cout[0])
	)
	
	NotHalfAdder not_half_adder1(
		.A(A[1]),
		.Cin(Cout[0]),
		.Cout([Cout[1]),
		.S(S[1])
	)
	
	NotHalfAdder not_half_adder2(
		.A(A[2]),
		.Cin(Cout[1]),
		.Cout([Cout[2]),
		.S(S[2])
	)
	
	NotHalfAdder not_half_adder3(
		.A(A[3]),
		.Cin(Cout[1]),
		.Cout([Cout[3]),
		.S(S[3])
	)
	
	NotHalfAdder not_half_adder4(
		.A(A[4]),
		.Cin(Cout[1]),
		.Cout([Cout[4]),
		.S(S[4])
	)
	
	NotHalfAdder not_half_adder5(
		.A(A[5]),
		.Cin(Cout[1]),
		.Cout([Cout[5]),
		.S(S[5])
	)
	
endmodule



module SelectiveComplement(A, S, Comp);
	
	input [5:0]A;
	input S;
	output [5:0]Comp;
	
	
	
endmodule

